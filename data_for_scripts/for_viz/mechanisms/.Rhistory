legend.text=element_text(size=14))
#Create a dataframe with the number of MGEs associated with cry genes
cry_mge_def = data.frame(num = c(172, 15, 415, 38, 0, 65),
toxin_group = c('cry', 'cry', 'cry', 'rec', 'rec','rec'),
mge_type = c('GIs','IS','None', 'GIs','IS','None'))
ggplot(cry_mge_def, aes(x=toxin_group,y=num,fill=mge_type)) +
facet_wrap(~toxin_group, scales = 'free')+
geom_bar(stat = 'identity')+
scale_fill_manual(values =c('#0DA5A5', '#E3AD7B', 'grey'))+
theme_bw()+xlab('Dataset')+ylab('Number of toxins')+
theme( axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x=element_text(face="bold", color="black",
size=18),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=14),
axis.title.y = element_text(face="bold", color="black",
size=18),
legend.title=element_text(face="bold",size=16),
legend.text=element_text(size=14))
#Flanks_of_conservative_blocks:
flank_seqs_results <- read.csv('/home/anton/phyl/recombination/NO_PAT/blocks_in_seqs/parents_aligments_per_event/Distribution_of_flank_identities_merged.csv', header = T, sep = "\t", stringsAsFactors = F)
flank_seqs_results$plot_factor <- flank_seqs_results$Reg_type
flank_seqs_results[ flank_seqs_results$Reg_type=='100_nucl_left',8] <- 'external'
flank_seqs_results[ flank_seqs_results$Reg_type=='100_nucl_right',8] <- 'external'
flank_seqs_results[ flank_seqs_results$Reg_type=='breakpoint',8] <- 'break_flank'
id_stat_per_event <- flank_seqs_results %>% group_by(ID, plot_factor) %>% summarize(Ident = mean(Identity)) %>% as.data.frame()
id_stat_total <- flank_seqs_results %>% group_by( plot_factor) %>% summarize(Ident = mean(Identity)) %>% as.data.frame() #0.5790488 vs 0.63
t.test(flank_seqs_results[flank_seqs_results$plot_factor=='external',3],flank_seqs_results[flank_seqs_results$plot_factor=='break_flank',3])
#p-value = 1.447e-07
write.table(id_stat_per_event ,file = "Identity_for_blocks_per_event.tsv",sep='\t', row.names = F)
x.Date <- as.Date(paste(2004, rep(1:4, 4:1), sample(1:28, 10), sep = "-"))
x <- zoo(rnorm(12), x.Date)
rollmean(x, 3)
rollapplyr(x, 3, mean, partial = TRUE, align='center')
rollmean(x, 3)
flank_seqs_results_pars <- read.csv('/home/anton/phyl/recombination/NO_PAT/blocks_in_seqs/parents_aligments_per_event/Parents_only_Distribution_of_flank_identities_merged.csv', header = T, sep = "\t", stringsAsFactors = F)
flank_seqs_results_pars$plot_factor <- flank_seqs_results_pars$Reg_type
flank_seqs_results_pars[ flank_seqs_results_pars$Reg_type=='100_nucl_left',8] <- 'external'
flank_seqs_results_pars[ flank_seqs_results_pars$Reg_type=='100_nucl_right',8] <- 'external'
flank_seqs_results_pars[ flank_seqs_results_pars$Reg_type=='breakpoint',8] <- 'break_flank'
id_stat_per_event_par <- flank_seqs_results_pars %>% group_by(ID, plot_factor, Flank_class) %>% summarize(Ident = mean(Identity)) %>% as.data.frame()
id_stat_total_par <- flank_seqs_results_pars %>% group_by( plot_factor) %>% summarize(Ident = mean(Identity)) %>% as.data.frame() #0.592 vs 0.648
t.test(flank_seqs_results_pars[flank_seqs_results_pars$plot_factor=='external',3],flank_seqs_results_pars[flank_seqs_results_pars$plot_factor=='break_flank',3])
#p-value = 3.547e-07
ggplot(id_stat_per_event_par, aes(y=Ident, x=factor(ID), color=plot_factor)) + #id_stat_per_event id_stat_per_event_par
geom_point(size =5)+
theme_bw()+scale_color_manual(values = c("#DC143C", '#5F9EA0' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Region type") +
ylab('Identity')+
guides(fill= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)
mean_identity_per_coord <- flank_seqs_results %>% group_by(Coord, plot_factor,Flank_class) %>% summarize(Ident = mean(Identity)) %>% as.data.frame()
mean_identity_per_coord_pars <- flank_seqs_results_pars %>% group_by(Coord, plot_factor,Flank_class) %>% summarize(Ident = mean(Identity)) %>% as.data.frame()
mean_identity_per_coord_pars_roll <- mean_identity_per_coord_pars
mean_identity_per_coord_pars_roll[which(mean_identity_per_coord_pars_roll$Flank_class=='Zone1'),4] <- rollapplyr(mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone1',4],5, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone2',4],5, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone3',4] <-rollapplyr(mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone3',4],5, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone4',4] <- rollapplyr(mean_identity_per_coord_pars_roll[mean_identity_per_coord_pars_roll$Flank_class=='Zone4',4],5, mean, partial = TRUE, align='center')
normal_ids <- c(71)
anomal_ids <- c()
for (ID in unique(id_stat_per_event_par$ID)){
ident_df_extr <- id_stat_per_event_par[id_stat_per_event_par$ID==ID & id_stat_per_event_par$Flank_class %in% c('Zone2', 'Zone3'),]
break_flank <- ident_df_extr[ident_df_extr$plot_factor=='break_flank',4]
external <- ident_df_extr[ident_df_extr$plot_factor=='external',4]
if (ID!=71){
if(break_flank>external){
normal_ids <- c(normal_ids,ID)
} else{
anomal_ids <- c(anomal_ids,ID)
}
}
}
flank_seqs_results_normal <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2', 'Zone3') & flank_seqs_results_pars$ID %in% normal_ids,]
flank_seqs_results_anomal <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2', 'Zone3') & flank_seqs_results_pars$ID %in% anomal_ids,]
mean_identity_per_coord_normal <- flank_seqs_results_normal %>% group_by(Coord, plot_factor,Flank_class) %>% summarize(Ident = mean(Identity), dispersion=sd(Identity)) %>% as.data.frame()
mean_identity_per_coord_pars_roll_normal <- mean_identity_per_coord_normal
mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone2',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone3',4] <-rollapplyr(mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone3',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone2',5] <- rollapplyr(mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone2',5],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone3',5] <-rollapplyr(mean_identity_per_coord_pars_roll_normal[mean_identity_per_coord_pars_roll_normal$Flank_class=='Zone3',5],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_anomal <- flank_seqs_results_anomal %>% group_by(Coord, plot_factor,Flank_class) %>% summarize(Ident = mean(Identity), dispersion=sd(Identity)) %>% as.data.frame()
mean_identity_per_coord_pars_roll_anomal <- mean_identity_per_coord_anomal
mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone2',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone3',4] <-rollapplyr(mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone3',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone2',5] <- rollapplyr(mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone2',5],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone3',5] <-rollapplyr(mean_identity_per_coord_pars_roll_anomal[mean_identity_per_coord_pars_roll_anomal$Flank_class=='Zone3',5],11, mean, partial = TRUE, align='center')
#ALL RESULTS
flank_seqs_results_all <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2', 'Zone3'),]
mean_identity_per_coord_all <- flank_seqs_results_all %>% group_by(Coord,Flank_class) %>% summarize(Ident = mean(Identity), stderror=stderror(Identity)) %>% as.data.frame()
stderror <- function(x) sd(x)/sqrt(length(x))
#ID
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3],11, mean, partial = TRUE, align='center')
#STD
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4],11, mean, partial = TRUE, align='center')
#[mean_identity_per_coord_all$Flank_class=='Zone2',] #DC143C
#[mean_identity_per_coord_all$Flank_class=='Zone3',] #5F9EA0
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord)) + #mean_identity_per_coord mean_identity_per_coord_pars
#geom_line(aes(colour=plot_factor, group=1))+
geom_line(aes(colour=Flank_class))+
geom_vline(xintercept = 100, linetype="dashed", color = "black",size=1.1, alpha = 0.7)+
geom_ribbon(aes(ymin=Ident-stderror, ymax=Ident+stderror), alpha=0.2) +
scale_colour_manual(values = c( '#DC143C' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Coordinate") +
ylab('Identity')+
guides(color= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)+ylim(c(0.35, 0.99))
mean_identity_per_coord_all
#[mean_identity_per_coord_all$Flank_class=='Zone2',] #DC143C
#[mean_identity_per_coord_all$Flank_class=='Zone3',] #5F9EA0
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord)) + #mean_identity_per_coord mean_identity_per_coord_pars
#geom_line(aes(colour=plot_factor, group=1))+
geom_line(aes(colour=Flank_class))+
geom_vline(xintercept = 100, linetype="dashed", color = "black",size=1.1, alpha = 0.7)+
geom_ribbon(aes(ymin=Ident-stderror, ymax=Ident+stderror), alpha=0.2) +
scale_colour_manual(values = c( '#DC143C' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Coordinate") +
ylab('Identity')+
guides(color= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)+ylim(c(0.35, 0.99))
flank_seqs_results_pars
#ALL RESULTS
flank_seqs_results_all <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2', 'Zone3'),]
mean_identity_per_coord_all <- flank_seqs_results_all %>% group_by(Coord,Flank_class) %>% summarize(Ident = mean(Identity), stderror=stderror(Identity)) %>% as.data.frame()
stderror <- function(x) sd(x)/sqrt(length(x))
#ID
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3],11, mean, partial = TRUE, align='center')
#STD
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',4] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',4],11, mean, partial = TRUE, align='center')
#[mean_identity_per_coord_all$Flank_class=='Zone2',] #DC143C
#[mean_identity_per_coord_all$Flank_class=='Zone3',] #5F9EA0
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord)) + #mean_identity_per_coord mean_identity_per_coord_pars
#geom_line(aes(colour=plot_factor, group=1))+
geom_line(aes(colour=Flank_class))+
geom_vline(xintercept = 100, linetype="dashed", color = "black",size=1.1, alpha = 0.7)+
geom_ribbon(aes(ymin=Ident-stderror, ymax=Ident+stderror), alpha=0.2) +
scale_colour_manual(values = c( '#DC143C' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Coordinate") +
ylab('Identity')+
guides(color= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)+ylim(c(0.35, 0.99))
library(ggplot2)
library(ggsci)
library(dplyr)
library(zoo)
library(micropan)
library(ggsignif)
setwd("~/phyl/data_for_git/data_for_scripts/for_viz/mechanisms")
flank_seqs_results_pars <- read.csv('Parents_only_Distribution_of_flank_identities_merged.csv', header = T, sep = "\t", stringsAsFactors = F)
#ALL RESULTS
flank_seqs_results_all <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2', 'Zone3'),]
mean_identity_per_coord_all <- flank_seqs_results_all %>% group_by(Coord,Flank_class) %>% summarize(Ident = mean(Identity), stderror=stderror(Identity)) %>% as.data.frame()
flank_seqs_results_pars
flank_seqs_results_all
mean_identity_per_coord_all
flank_seqs_results_all
mean_identity_per_coord_all <- flank_seqs_results_all %>% group_by(Coord,Flank_class) %>%
summarize(Ident = mean(Identity), stderror=stderror(Identity)) %>% as.data.frame()
stderror <- function(x) sd(x)/sqrt(length(x))
mean_identity_per_coord_all <- flank_seqs_results_all %>% group_by(Coord,Flank_class) %>%
summarize(Ident = mean(Identity), stderror=stderror(Identity)) %>% as.data.frame()
#ID
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3],11, mean, partial = TRUE, align='center')
#STD
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',4] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',4],11, mean, partial = TRUE, align='center')
#[mean_identity_per_coord_all$Flank_class=='Zone2',] #DC143C
#[mean_identity_per_coord_all$Flank_class=='Zone3',] #5F9EA0
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord)) + #mean_identity_per_coord mean_identity_per_coord_pars
#geom_line(aes(colour=plot_factor, group=1))+
geom_line(aes(colour=Flank_class))+
geom_vline(xintercept = 100, linetype="dashed", color = "black",size=1.1, alpha = 0.7)+
geom_ribbon(aes(ymin=Ident-stderror, ymax=Ident+stderror), alpha=0.2) +
scale_colour_manual(values = c( '#DC143C' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Coordinate") +
ylab('Identity')+
guides(color= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)+ylim(c(0.35, 0.99))
#Vizualize roll mean identity values surronding selected breakpoints
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord))
#Vizualize roll mean identity values surronding selected breakpoints
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord))+
geom_line(aes(colour=Flank_class))+
geom_vline(xintercept = 100, linetype="dashed", color = "black",size=1.1, alpha = 0.7)+
geom_ribbon(aes(ymin=Ident-stderror, ymax=Ident+stderror), alpha=0.2) +
scale_colour_manual(values = c( '#DC143C' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Coordinate") +
ylab('Identity')+
guides(color= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)+ylim(c(0.35, 0.99))
library(ggplot2)
library(ggsci)
library(dplyr)
library(zoo)
library(micropan)
library(ggsignif)
library(gridExtra)
library(ggfortify)
library(factoextra)
setwd("~/phyl/data_for_git/data_for_scripts/for_viz/mechanisms")
flank_seqs_results_pars <- read.csv('Parents_only_Distribution_of_flank_identities_merged.csv', header = T, sep = "\t", stringsAsFactors = F)
#The function rom calculating standart mean error
stderror <- function(x) sd(x)/sqrt(length(x))
#Extract flanks between the first and the second and between the second and the third domains
flank_seqs_results_all <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2', 'Zone3'),]
#Calcuate mean and mean square errors per each coordinate
mean_identity_per_coord_all <- flank_seqs_results_all %>% group_by(Coord,Flank_class) %>%
summarize(Ident = mean(Identity), stderror=stderror(Identity)) %>% as.data.frame()
#Apply rollmean function to coordinate wise distributions of mean identity and standart mean error
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',3],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',3],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4] <- rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',4],11, mean, partial = TRUE, align='center')
mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',4] <-rollapplyr(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone3',4],11, mean, partial = TRUE, align='center')
#Vizualize roll mean identity values surronding selected breakpoints
ggplot(mean_identity_per_coord_all[mean_identity_per_coord_all$Flank_class=='Zone2',], aes(y=Ident, x=Coord))+
geom_line(aes(colour=Flank_class))+
geom_vline(xintercept = 100, linetype="dashed", color = "black",size=1.1, alpha = 0.7)+
geom_ribbon(aes(ymin=Ident-stderror, ymax=Ident+stderror), alpha=0.2) +
scale_colour_manual(values = c( '#DC143C' ))+
theme( axis.text.x = element_text(color='black',
size=12),
axis.title.x=element_text(face="bold", color="black",
size=14),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(color='black',
size=12),
axis.title.y = element_text(face="bold", color="black",
size=14),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12))+
xlab("Coordinate") +
ylab('Identity')+
guides(color= guide_legend(title="Region type"))+
facet_wrap(~Flank_class)+ylim(c(0.35, 0.99))
euclidean_mean <- function(a, b) sqrt(sum((mean(a) - mean(b))^2))
euclidean_vec <- function(a, b)  sqrt(sum((a - b)^2))
euclidean_vec_roll <- function(a, b) sqrt(sum((rollapplyr(a,11, mean, partial = TRUE, align='center') - rollapplyr(b,11, mean, partial = TRUE, align='center'))^2))
#Manhattan distance
vec_sub <-  function(a, b) sum(abs(a-b))
vec_sub_roll <-  function(a, b) sum(abs(rollapplyr(a,11, mean, partial = TRUE, align='center')-rollapplyr(b,11, mean, partial = TRUE, align='center')))
#Cosine distance
vec_cos <-  function(a, b) 1-round(cosine(a,b),6)
vec_cos_roll <-  function(a, b) 1-round(cosine(rollapplyr(a,11, mean, partial = TRUE, align='center'),rollapplyr(b,11, mean, partial = TRUE, align='center')),6)
#The function for contructing a distance matrix based on a data of coordinate-wie identity per recombination event
make_dist_matr<-function(id_data_frame, dist_func){
#Get the list of recombination events
events_list <- unique(id_data_frame$ID)
#Create a dummy distance matrix
dist_matrix <- matrix(data=0, nrow=length(events_list), ncol = length(events_list),
dimnames = list(as.character(events_list),as.character(events_list)))
#Apply distance function to calculate the difference between the events
id <- dist_func(id_data_frame[id_data_frame$ID==3,3], id_data_frame[id_data_frame$ID==0,3])
#Iterate over recombination events with respective calculating of identity difference
for (ID1 in events_list){
for (ID2 in events_list){
vec1<-id_data_frame[id_data_frame$ID==ID1, 3]
vec2<-id_data_frame[id_data_frame$ID==ID2, 3]
dist_matrix[as.character(ID1), as.character(ID2)]<- dist_func(vec1, vec2)
}
}
return(dist_matrix)
}
#The function for adding the threshold for clusters on the dendrorgram
add_lines_to_clust <- function(k, n, clusters){
#Calculate the coordinates of the line based on branch lengths and selected number of clusters
MidPoint = (clusters$height[n-k] + clusters$height[n-k+1]) / 2
abline(h = MidPoint, lty=2)
}
#The function for vizualizing results of hierarcheal clusters
draw_hclust_res <- function(clusters, k_vec, n, out_name){
#Plot the dendrogram
plot(clusters)
#Add lines with clustering thresholds
for (k in k_vec){
add_lines_to_clust(k,n, clusters)
}
#Save plots as pdf files
dev.print(pdf, paste0(out_name,'.pdf'))
dev.off()
}
#The function for inferring the clustering patterns for each recombination event
get_hc_clusters<- function(clusters,clust_method, cut_num){
#Get cluster cut
clusterCut <- cutree(clusters, cut_num)
#Create a dataframe stating the method of clusterization, total number of clusters and event-based clustering attributions
names_frame <- data.frame(ID=names(clusterCut), Cluster=clusterCut,
Cluster_method=clust_method, Cluster_num=cut_num, row.names=NULL)
return(names_frame)
}
#The general function for performing hiearcheal clusterization with plotting the results and inferring event-wise attributions
analyze_hc_clusters <- function(dist_matr, k_vec, name_pref){
#Perform clustering on the distance matrix
clusters <- hclust(as.dist(as.matrix(dist_matr)), method = "complete")
n = nrow(dist_matr)
name = paste0(name_pref,'_hclust')
#Plot dendrograms of clustering results
draw_hclust_res(clusters, k_vec,n, name)
out_df <- data.frame(ID=c(), Cluster=c(), Cluster_method=c(), Cluster_num=c(), row.names=NULL)
#Create dataframes with event-wise clustering patterns
for (k in k_vec){
clust_df <- get_hc_clusters(clusters,name,k)
out_df <- rbind(out_df,clust_df)
}
return(out_df)
}
#The function for vizualizing k-means clustering results via the autoplot function
draw_autoplot <- function(clust_kmeans,sc_kmeans){
p<-autoplot(clust_kmeans,
data=sc_kmeans, label = TRUE,frame = TRUE,
frame.type = 'convex',label.size = 3.3,label.col='black', alpha=0.8)+
scale_colour_manual(values = c('grey','grey','grey', 'grey','grey', 'grey', 'grey'))+
scale_fill_lancet()+
theme_bw()+
theme(axis.text.y = element_text(color='black',
size=14),
axis.title.y=element_text(color="black",
size=16),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=14),
axis.title.x = element_text(color="black",
size=16),
legend.position = 'none'
) +
scale_x_continuous(expand = c(.1, .1))
scale_y_continuous(expand = c(.1, .1))
return(p)
}
#the function for performing k-means clusterinf on the distance matrix
get_kmeans_clusters<- function(dist_matr,clust_method, cut_num){
sc_kmeans <- data.frame(t(dist_matr))
#Perform clustering with a defined number of clusters
clust_kmeans <- kmeans(sc_kmeans,centers=cut_num)
#Obtain the data with clusters for recombination events
sc_kmeans$ID = rownames(sc_kmeans)
sc_kmeans$clust = as.factor(clust_kmeans$cluster)
names_frame <- data.frame(ID=sc_kmeans$ID, Cluster=sc_kmeans$clust, Cluster_method=clust_method, Cluster_num=cut_num, row.names=NULL)
return(names_frame)
}
#The function for vizualizing k-means clutering results
draw_kmeans_clusters <- function(dist_matr,cut_num){
#Perform k-means clustering procedure
sc_kmeans <- data.frame(t(dist_matr))
clust_kmeans <- kmeans(sc_kmeans,centers=cut_num)
#Plot results via the autoplot function
k_plot <- draw_autoplot(clust_kmeans,sc_kmeans)
return(k_plot)
}
#The overall function for k-mean clutering
analyze_kmeans_clusters <- function(dist_matr, k_vec, name_pref){
#Create the dataframe with event-wise clustering attributions
name = paste0(name_pref,'_kmeans')
out_df <- data.frame(ID=c(), Cluster=c(), Cluster_method=c(), Cluster_num=c(), row.names=NULL)
#Iterate over the list of clustering thresholds
k_plots <- list()
for (k in k_vec){
#Perform the k-means procedure
clust_df <- get_kmeans_clusters(dist_matr, name, k)
out_df <- rbind(out_df,clust_df)
#Save the results of the autoplot functionss
k_plot <- draw_kmeans_clusters(dist_matr,k)
k_plots <- c(k_plots, list(k_plot))
}
#Arrange autoplots into the panel
do.call(grid.arrange, c(k_plots, nrow = 1))
dev.print(pdf, paste0(name,'.pdf'), width = 12, height = 5)
dev.off()
return(out_df)
}
#The function for defining the optimal number of clusters based on the silhouette analysis
define_optimal_clusters <- function(dist_matr, k_num, name_pref){
#Make the list of the clustering qualities
stat_plots <- list()
#Iteratively applu the fviz_nbclust function with plotting clustering quality
for (clust_method in c(hcut, kmeans)){
for (stat_type in c('silhouette', 'wss', 'gap_stat')){
stat_plot <- fviz_nbclust(dist_matr, clust_method, method = stat_type, k.max=k_num)
stat_plots <- c(stat_plots, list(stat_plot))
}
}
#Arrange the resulting plots into panels
do.call(grid.arrange, c(stat_plots, nrow = 2))
dev.print(pdf, paste0(name_pref,'.pdf'), width = 15, height = 8)
dev.off()
}
#The function for iterating ove two objects
zip <- function(...) {
mapply(list, ..., SIMPLIFY = FALSE)
}
#The general function for assesing clusterization quality and plotting the results obtained
get_stat_for_clusts <- function(dist_matr, matr_pref, k_num, k_vec){
#Crate a dataframe with the assessments per method and disnace metrics
stat_res <- data.frame(clusters=c(),y=c(),matr=c(), clust_type=c())
#The list with clustering methods
meth_list <- zip(c(hcut, kmeans),c('hclust','kmeans'))
#Iterate over methods (hclust and k-means) for assesing quality
for (ind in 1:2){
clust_method <- meth_list[[ind]][[1]]
method_name <- meth_list[[ind]][[2]]
#Apply the fviz_nbclust function
shil_stat <- fviz_nbclust(dist_matr, clust_method, method = 'silhouette', k.max=k_num)
#Save the quality estimates for a defined distance metrics
shil_stat_df <- shil_stat$data[k_vec, ]
shil_stat_df$matr <- matr_pref
shil_stat_df$clust_type <- method_name
stat_res <- rbind(stat_res, shil_stat_df)
}
return(stat_res)
}
#Clusterizations by identity
flanks_extr_zone_2 <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone2'),]
flanks_extr_zone_3 <- flank_seqs_results_pars[flank_seqs_results_pars$Flank_class %in% c('Zone3'),]
flanks_extr_zone_2
clust_res_zone3 <- data.frame(ID=c(), Cluster=c(), Cluster_method=c(), Cluster_num=c())
